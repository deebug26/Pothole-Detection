INDEX.HTML



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap');

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
            position: relative;
            overflow: hidden;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(12px);
        }

        .container {
            position: relative;
            text-align: center;
            background: rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(20px);
            padding: 50px;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            width: 380px;
            color: white;
        }

        h1 {
            margin-bottom: 25px;
            font-weight: 600;
            font-size: 24px;
        }

        input {
            display: block;
            width: 100%;
            padding: 14px;
            margin: 15px 0;
            border: none;
            border-radius: 10px;
            outline: none;
            background: rgba(255, 255, 255, 0.4);
            color: white;
            font-size: 16px;
            transition: 0.3s;
        }

        input:focus {
            background: rgba(255, 255, 255, 0.6);
        }

        input::placeholder {
            color: rgba(255, 255, 255, 0.8);
        }

        button {
            width: 100%;
            padding: 14px;
            margin-top: 20px;
            background: #00c6ff;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 18px;
            font-weight: 500;
            transition: 0.3s;
        }

        button:hover {
            background: #0072ff;
        }
    </style>
</head>
<body>
    <div class="overlay"></div>
    <div class="container">
        <h1>Login / Sign Up</h1>
        <form action="/login" method="post">
            <input type="email" placeholder="Email" name="email" id="email" required>
            <input type="password" placeholder="Password" name="password" id="password" required>
            <button type="submit">Submit</button>
        </form>
    </div>
</body>
</html>



APP.PY
from flask import Flask, render_template, Response, request, redirect, url_for, session
import cv2
import numpy as np

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# Load YOLO model
net = cv2.dnn.readNet("E:\Pothole_detection\Pothole_detection\yolov4-tiny.weights", "E:\Pothole_detection\Pothole_detection\yolov4-tiny.cfg")

with open("E:\Pothole_detection\Pothole_detection\coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

def detect_potholes():
    cap = cv2.VideoCapture(0)
    pothole_info_list = []  # Store pothole information for web display

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        height, width, _ = frame.shape
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        layer_names = net.getLayerNames()
        output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
        outputs = net.forward(output_layers)

        boxes, confidences, class_ids = [], [], []
        for output in outputs:
            for detection in output:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5:
                    center_x, center_y, w, h = (detection[0:4] * np.array([width, height, width, height])).astype('int')
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)

        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)
        pothole_info = []

        for i in range(len(boxes)):
            if i in indexes:
                x, y, w, h = boxes[i]
                label = str(classes[class_ids[i]])
                color = (0, 255, 0)
                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, label, (x, y + 30), cv2.FONT_HERSHEY_PLAIN, 3, color, 3)

                pothole_info.append({
                    'x': x,
                    'y': y,
                    'width': w,
                    'height': h,
                    'confidence': confidences[i]
                })

        pothole_info_list = pothole_info #update the global pothole list.

        _, buffer = cv2.imencode('.jpg', frame)
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    cap.release()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['POST'])
def login():
    email = request.form.get('email')
    password = request.form.get('password')

    if email and password:
        session['user'] = email
        return redirect(url_for('camera'))
    return redirect(url_for('index'))

@app.route('/camera')
def camera():
    if 'user' in session:
        return render_template('camera.html')
    return redirect(url_for('index'))

@app.route('/video_feed')
def video_feed():
    if 'user' in session:
        return Response(detect_potholes(), mimetype='multipart/x-mixed-replace; boundary=frame')
    return redirect(url_for('index'))

@app.route('/pothole_data')
def pothole_data():
    if 'user' in session:
        # call detect potholes to update the pothole list.
        detect_potholes()
        return render_template('pothole_data.html', potholes=pothole_info_list)
    return redirect(url_for('index'))

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)



    #for data   
'''    <!DOCTYPE html>
<html>
<head>
    <title>Camera Feed</title>
</head>
<body>
    <h1>Camera Feed</h1>
    <img src="{{ url_for('video_feed') }}">
    <br>
    <a href="{{ url_for('pothole_data') }}">View Pothole Data</a>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>'''



potholedata.html
<!DOCTYPE html>
<html>
<head>
    <title>Pothole Data</title>
</head>
<body>
    <h1>Pothole Data</h1>
    {% if potholes %}
        <table>
            <thead>
                <tr>
                    <th>X</th>
                    <th>Y</th>
                    <th>Width</th>
                    <th>Height</th>
                    <th>Confidence</th>
                </tr>
            </thead>
            <tbody>
                {% for pothole in potholes %}
                    <tr>
                        <td>{{ pothole.x }}</td>
                        <td>{{ pothole.y }}</td>
                        <td>{{ pothole.width }}</td>
                        <td>{{ pothole.height }}</td>
                        <td>{{ pothole.confidence }}</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>No potholes detected.</p>
    {% endif %}
    <br>
    <a href="{{ url_for('camera') }}">Back to Camera</a>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>


camera.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera Feed</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(to right, #0f2027, #203a43, #2c5364);
            overflow: hidden;
        }

        .camera-page {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(15px);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
            width: 400px;
            color: white;
            animation: fadeIn 1s ease-in-out;
        }

        h2 {
            margin-bottom: 20px;
            font-weight: 600;
        }

        .camera-icon img {
            width: 80px;
            height: 80px;
            cursor: pointer;
            transition: transform 0.3s ease-in-out;
        }

        .camera-icon img:hover {
            transform: scale(1.1);
        }

        .vehicle-img {
            width: 100%;
            border-radius: 10px;
            margin-top: 15px;
        }

        button {
            width: 100%;
            padding: 12px;
            margin-top: 15px;
            background: #ff416c;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: 0.3s;
        }

        button:hover {
            background: #ff4b2b;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <div class="camera-page">
        <h2>Welcome!</h2>
        <div class="camera-icon">
            <img src="{{ url_for('static', filename='images camera.jpg') }}" alt="Camera" onclick="goToWorkingPage()" />
        </div>
        <img src="{{ url_for('static', filename='vechiles.webp') }}" alt="Vehicles" class="vehicle-img" />
        <button onclick="window.location.href='/logout'">Logout</button>
    </div>
    <script>
        function goToWorkingPage() {
            window.location.href = "/video_feed";
        }
    </script>
</body>
</html>


